block ::= ( expr ";"? )*

expr ::= "do" block "end" # __do
  | "while" expr "do" block "end" # __while
  | "if" expr "then" block ( "elif" expr "then" block )* ( "else" block )? "end" # __if
  | "fun" "[" identlist? "]" expr # __fun
  | "let" SYMBOL "=" expr # __let
  | "return" expr # __return
  | assignment

exprlist   ::= expr ( "," expr)*
identlist  ::= SYMBOL ( "," SYMBOL )*
fieldlist  ::= fieldinit ( "," fieldinit )* ","?
fieldinit  ::= ( field "=" )? expr 
field      ::= "[" expr "]" | "." SYMBOL # __get


# assignment ::= ( SYMBOL | ( call field ) ) "=" expr | logic_or
assignment ::= call "=" expr | logic_or # __set
logic_or   ::= logic_and ( "or" logic_and )* #__or
logic_and  ::= equality ( "and" equality )* #__and
equality   ::= comparison ( ( "!=" | "==" ) comparison )* #__eq __neq
comparison ::= term ( ( ">" | ">=" | "<" | "<=" ) term )* #__gt __geq __lt __leq
term       ::= factor ( ( "-" | "+" ) factor )* # __sub __add
factor     ::= unary ( ( "/" | "*" ) unary )* # __div __mul
unary      ::= ( "!" | "-" ) unary | call # __not __neg
call       ::= primary ( "(" exprlist? ")" | field | ":" SYMBOL "(" exprlist? ")" )*
primary    ::= "true" | "false" | "nil" | NUMBER | STRING | SYMBOL | "(" expr ")"
            | "{" fieldlist? "}" ] | "[" exprlist? "]" # thing list

NUMBER ::= DIGIT+ ( "." DIGIT+ )? 
STRING ::= ( "\"" <any char except "\"">* "\"" )
SYMBOL ::= ALPHA ( ALPHA | DIGIT )* 
ALPHA ::= "a" ... "z" | "A" ... "Z" | "_" 
DIGIT ::= "0" ... "9" 

# TODO:

# typeof

# DONE:

# __selfcall
# __return
# __while
# __or
# __and
# __gt 
# __geq 
# __lt 
# __leq
# __get
# __set
# list
# __do
# __fun
# __if
# __sub 
# __add
# __div 
# __mul
# __neg
# Boolean
# Number
# String
# __not 
# __eq 
# __neq
# __let
# __assign
# thing
# print


NUM STR BOOL PRIM PROC SPECIAL SYMBOL CALL